// Automatically generated by MockGen. DO NOT EDIT!
// Source: k8s.io/client-go/kubernetes/typed/core/v1 (interfaces: NodeInterface)

package mock_v1

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v10 "k8s.io/client-go/pkg/api/v1"
)

// Mock of NodeInterface interface
type MockNodeInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeInterfaceRecorder
}

// Recorder for MockNodeInterface (not exported)
type _MockNodeInterfaceRecorder struct {
	mock *MockNodeInterface
}

func NewMockNodeInterface(ctrl *gomock.Controller) *MockNodeInterface {
	mock := &MockNodeInterface{ctrl: ctrl}
	mock.recorder = &_MockNodeInterfaceRecorder{mock}
	return mock
}

func (_m *MockNodeInterface) EXPECT() *_MockNodeInterfaceRecorder {
	return _m.recorder
}

func (_m *MockNodeInterface) Create(_param0 *v10.Node) (*v10.Node, error) {
	ret := _m.ctrl.Call(_m, "Create", _param0)
	ret0, _ := ret[0].(*v10.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeInterfaceRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockNodeInterface) Delete(_param0 string, _param1 *v1.DeleteOptions) error {
	ret := _m.ctrl.Call(_m, "Delete", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNodeInterfaceRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

func (_m *MockNodeInterface) DeleteCollection(_param0 *v1.DeleteOptions, _param1 v1.ListOptions) error {
	ret := _m.ctrl.Call(_m, "DeleteCollection", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNodeInterfaceRecorder) DeleteCollection(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteCollection", arg0, arg1)
}

func (_m *MockNodeInterface) Get(_param0 string, _param1 v1.GetOptions) (*v10.Node, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0, _param1)
	ret0, _ := ret[0].(*v10.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeInterfaceRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

func (_m *MockNodeInterface) List(_param0 v1.ListOptions) (*v10.NodeList, error) {
	ret := _m.ctrl.Call(_m, "List", _param0)
	ret0, _ := ret[0].(*v10.NodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeInterfaceRecorder) List(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List", arg0)
}

func (_m *MockNodeInterface) Patch(_param0 string, _param1 types.PatchType, _param2 []byte, _param3 ...string) (*v10.Node, error) {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Patch", _s...)
	ret0, _ := ret[0].(*v10.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeInterfaceRecorder) Patch(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Patch", _s...)
}

func (_m *MockNodeInterface) PatchStatus(_param0 string, _param1 []byte) (*v10.Node, error) {
	ret := _m.ctrl.Call(_m, "PatchStatus", _param0, _param1)
	ret0, _ := ret[0].(*v10.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeInterfaceRecorder) PatchStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PatchStatus", arg0, arg1)
}

func (_m *MockNodeInterface) Update(_param0 *v10.Node) (*v10.Node, error) {
	ret := _m.ctrl.Call(_m, "Update", _param0)
	ret0, _ := ret[0].(*v10.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeInterfaceRecorder) Update(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0)
}

func (_m *MockNodeInterface) UpdateStatus(_param0 *v10.Node) (*v10.Node, error) {
	ret := _m.ctrl.Call(_m, "UpdateStatus", _param0)
	ret0, _ := ret[0].(*v10.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeInterfaceRecorder) UpdateStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateStatus", arg0)
}

func (_m *MockNodeInterface) Watch(_param0 v1.ListOptions) (watch.Interface, error) {
	ret := _m.ctrl.Call(_m, "Watch", _param0)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeInterfaceRecorder) Watch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch", arg0)
}
